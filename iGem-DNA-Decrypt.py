#Decryption program 
#Decrypt passcode and cipher text
#University of Edinburgh iGEM 2016
#Catalina Rotaru & Freddie Starkey 

import random
import fractions
import gmpy
import sympy
import numpy
from multiprocessing import Pool

#cipher = raw_input('Introduce your cipher key: ')
sequence = raw_input('Introduce your cipher word: ')
#public = raw_input('Introduce your public key: ')
#private = raw_input('Introduce your private key: ')
wordNumber = 2
#future time, the user will need to input the words number

#public = 6074273907237645724104027105860708102859515314153714404465426478663652562801781634593028041792046682310811248783634476100578358497353890286753183791253153490174394488048932573187850089919928616433166252583174609268188562560762961699947163787845669018044562777961634064056450698984432495515485544277335880402396079233592818122523048914606028222804235919664810029726111495093282764685843144122502370353291707191761614307143251729781648541525653827435087045626338065653248080840251920618929234548799456828325384174072391785318189581847033197690103027442318313863234473490226895909436466622403777982511791213388605835218222463693766381301754893200825984102815235135937334179386407876594107628594397034286537903915582093497313097610265599066414103305233200527295943705847189848762121633566050704134493471449572052506639459180202843763675886209471596733316625194260296749530848788294802637630947060931161800880156864257062080030161312547043571891943873561732753527551882280792609019566978484484768466137233522287584580406551649471990855922771516739467826503834697983480908409554293413123545725207419819755031043144885181032382754167354684829452049679799686994643212284397681576209636793502089158499861583545617477554181350060157699561661341529711055205562976495837357251544479189110859954857427838935328375413200482562928167822403886349183989187130386615374475709709579866106418294487769582319327343297562282826988753429198607129925673349268128413985691756989654731770715449925748239900670475224881593578947005333303022595368913220530731615927806835909166651996257340686848491872754603089351077509079970714975634636543049954036358984308845074099931285836909431471536294361015807597462947752279288475893630972667040812968023737977999048183161545413427171428269999173492663987391832740183306655297842002856322381449540584418341980202930869165512095905335019
public =  3740269854145074799418780393225858151362513639855057209494513772608415527271990550472374696239709396342914951991918248059865489346852243051682868870643020633154628692835513548094795016286710833864215482962337778265637702670595789037524207944432926775000433917864174341590669309890039218099885725191062483541281852197130761420952009967650545919870119324755591376237895268298615132139082274647846119345519652148501149535198755574543973935864080887815735199735646134548025907104075183055429301010505509735215507815302732950663877918949537679698139201055527125345667325517218924537120139474136073983040557299425240894882898283076115399395789231627390353097323025826511911279196635898280791008689480977991295791579699584459889460436067932502397348367237800040984475048925350108481555985305650479827668939137476602235802805664920446259199008070483384413431335957136937329744002137285409211642576108193128754557468684031914191519612601025268396422468876234686105259315230216461024805859349442518968633557538015408406567875554043386899288113663641068695846536207784645775305314182439609636743234891475355405318118477519489230892400210443607869462024813801983458499819872823310829427847962354146389335968700809609037810936266724198856982008720088617774971728586475395197530655998265107655229224349729089736696652169393851703065664156949235991824237335289938011847972753882203365473732014057791807732674810652714901073596655457119642761387379939969121056690203358320852833286136624133705848488645088080455978759887252760639035581436134997012471377937747288002602795303908371424872913310956285129533135671208215017741548421234124226843104086313093693964658570650184726545022901358733625526697752820209699104987961089124269055007417450786149456438318593670007436228714827472165342967159513045451508064131523404949102096217004533062266370797630224114686039114889



#private = 3494841705417495721278484829392943135307968120781615073385501413024266564125863868322298200032204777953856702909985652779125751369072423325975917175108289510841116726162517248478437804311051424440197359866350207820019650269504086515539538283906879452166571956475685372683035260355258334804673338445436991627785899278070203116291793365180175274116734996535720537046223364813054054660209982191178345713350278743198477420329707722144879598988903558784885304067639013907218125973870050372320220675144113030093792286480808840575151418656541744225272282629512047024966179500814995894522374785391410465500878210205118857939458168044243935959030788027214807397748557820883365191751180847265384642164750194351336283526911625826778208841043158516899171883718561943205270190561497072466857791346352544292835618618444818246502412207548990485150813513757387504109330831607132051734246396850065372059336205884437311346242101792308146203250528690741181486205377617441008341634245415712690036534102686098194264348717497976681116251215620743132952236751369355719585449475673817784166039647055750475088200114640638099417522676185350897718817918026436124181829707307915043402458100818389246989181935511954258915582682192946395605938473990093965119389294587882587763518862412282508430482961971371435772037096554669710947875113608302971463618514448054265142618855504104658512114112324848311372487683601966867090164036710265068622353209037662589481488411753349202293706344678185649300688242631665298759307256809474033629689593550423697525580252409275921843856356741384983812745759756639599618905378711802943298828670425297106349057875514719194604141078213715795431580913317543958170439985079491515246632224889056224912089077320849861845361967991306199875983922554443500276919183198148260290698121040151157834087128222653625768121219387110279245224909950368496382858337997
private = 978202149295577974477042863838706969111935140758898252673786448747490575893954986772705436929570796503506450312949386974684289877381818212037336012414834666248482124067325544992683951278388699869065348641254088944022809198890115700033331846562226677000619059058042880859901287391897726109916163434798972245094608007029500690320155463504961653005558218714743927554188693383139794495695086806563505605661046920783097900257083475429986382329341191854797793056931505859393778370582842803713780511698925390565671078929575609486258742870411527590370115676357528897245223693166083148577444091499066647914415212007243026566285765520849166439428760644383484628597078727552893013406102856026502178595371663249387371042671704119736163370379854362049411664784444326249004012415277384725174927531359989410626791730741061754395940251736162657588116250006831035147710097128838532661399673444635254228904265370920271814327721248009207839536983565724502064088717953027187532425643559662049233828464492497185116032192690760286835458851593674542436733100670347250160477316697107821709593136708695745632222705691317265896379207828301742616644020810204919685377947378363050517825473316282862614713439639702089103190484590542065815339864395687636525974491030586991462837960636306474238480865882877824692099419293669216177627917990897650014473718496623208432678871148898382422085176077440020029126424363757500239014065210988398735928164078164150783979362296202980610122423462323929124346676575706645797264376681232347974418006497007119651609755089243574528138629620879270868913668348556915410705417592234545739510849906564635210241393663785342083214349517476369899567887289110729875102946295393094992124162178634820321574328013659484807725978096863274767793144661208108428724451773219590004811033524102200654045819407823459646301863279400126217612140406071955169320659191


#cipher = 1893201552219043304471771379581998669009293112740585541395955969686576070824317448593967252611085861825597747919726312373406028192530154809979572509393705424265232635236127776403228987690288693436004187635386529787631968827777353388640631903499337122270021006053655933300639048831375457799906334385329475063734044083543590132157795724608179643483837736233687755495192046043898239731097462204340575941438810420153089768391446993650955013566698846024738124339793175737047523760953554025681090812182158005419836380028782521779223487274480414717348918504447769851727553913423787316526431773848604667599533149424114942368391079016832444809644201538959830991530321719657402811572020139259186540015244632686742685673236874312581811277419981469599747212351981068226669043757387826219881761798878147468448411367269501853198016195990840174718521786396672558061849913089238845110863691183608559052132356075304814978907887727971964448837351645643214956246895128335323501265109312910806743266385783244921941048006266932932595403682410796372720467424756141058446405541653290447706758821757602949660558663221980166684783648242847767201456177650126239273132424196115910532318626957446553220332798882443879008688388527516303010591115024580316294510159474468229960543735098451702327634327053065417969236805804177904660753873691832800978575282884230789675477621348376079720747860609594912575314760629747932259047915368013258309096529212599154194186084580119133515469386354716901326145899612285847604616237940782625925796537350149880346049985964233388479746402461780942587538699983087724608195876729323632853120144934782179044135734735715702741224716931932846276928520435590768145430275393240913891853443972412183149607621644282254270774012272355992437997706602133230103357293145199391351462498705082211169715001362222646298765498214743562660434687196513607163829765652
cipher = 2765635390332245550501030962781382699175679467438445393577701631658422322681391354199549322813227505619837933914037023409521138554038296289343895718958386323928516075130810675594314849780593043463666524651111870625336794486904065509984394337239576113221921210953852107161874501121541975389996782332921217933036542052437049638681244094171795641789197220237061872584682674833961217898292136206314037351520728316177610751301218685989178096784804339761585902176632137764807931574702442781093003245682365060237169628594089886746613331484798167160583296101930907088106586451291192208250463236925475240219932774003634994230065933735874951068435651129998753502202067949456717605995487517948594088752145142358040491650720779044519356756444936648680096687631471025526306985657384891213415146974108037130378610137262228651863433148525804266387588301723477058552106846257127167881145111805961987915549934398461902050051328389299025093091275469084866574481667659288618495762159687523827384494139365918811776216533287641491448052911203433537514228205192569491492477643442783613963987047939543187497747457520843880428627482654873036108508360981154127610642363852419513312165568698394921248899211973481993904879480024294604132136586774342095576816708319227101521718816690345491871218863363681867825988221233800852738913535258079834403985885773243457609700809523567597572674917333648511091501454446606080903296688598151823736986573282183307054198974269251760633684019677657594772960704809258644531488116644383329052990252013033042875763184291067178704459863223595886480741452064706569522838703280278619974736364592433988931492766303381549572286741300832286115629824785409736901696423919926129760075254970979926250014654001195394775909109567134058475886439271830913867806524127898784753054663388037361579304028782427793003576018966913685543069192060527331943444647337




def extractKey(passCode, wordNumber):
    #Extract the keys from the passcode 
    key = generateFromKey(passCode, wordNumber)
    array_key = []
    for i in key:
        sizeKey = str(convertKey(i))
        if len(sizeKey) == 5:
            array_key.append(sizeKey)
        elif len(sizeKey) < 5:
            array_key.append(wordPad(sizeKey))
    return array_key

def decryptText(cipher, sequence, public, private):
    #Function for text decryption
    passCode = rsaDecrypt(cipher, private, public)
    mapping = extractKey(passCode, wordNumber)
    ekey = mapping.pop(0)  #this line will need change
    keybase4 = transform_key(ekey)
    list = change(sequence)
    zip_all = zip(list, keybase4)
    crypto_numbers = apply_xor(zip_all)
    crypto_final = ''.join(translate_crypto(crypto_numbers))
    return crypto_final





def rsaDecrypt(encrypted, privateKey, publicOne):
    #RSA Decryption
    return pow(encrypted, privateKey, publicOne)


def convertKey(key):
    #Covertion for key from base 10 to 4
    return int(numpy.base_repr(int(str(key), base=10), 4))

def wordPad(unlengthB4):
    # increases the size of a dna code up to 5 bases
    #returns a string, you need to convert it into an int !!!!
    return ('0' * (5 - len(str(unlengthB4)))) + str(unlengthB4)

def generateFromKey(passCode, wordNumber):
    #Random generating function for passcode
    random.seed(passCode)
    mapping = []
    for i in xrange(wordNumber):
        mapping.append(random.randint(0, 1023))
    return mapping


def transform_key(key):
    mapped = []
    for i in key:
        int_key = int(i)
        mapped.append(int_key)
    return mapped


def change(sequence):
    #Translate sequence from DNA to numerical format
    xcode = []
    for letter in sequence:
            if letter =='A':
                xcode.append(0)
            elif letter == 'T':
                xcode.append(1)
            elif letter == 'G':
                xcode.append(2)
            elif letter == 'C':
                xcode.append(3)
    return xcode
    
 


def xor(num1, num2, offset):
    #XOR function
    offset = offset or 0
    return (4 - (offset + num1 + num2) % 4) % 4
    


def apply_xor(zip_all):
    #Applying XOR
    crypto = []
    for (l,k) in zip_all:
        crypto.append(xor(l,k,0))
    return crypto        
            

def translate_crypto(crypto_numbers):
    xco = []
    for c in crypto_numbers:
        if c == 0:
            xco.append('A')
        elif c == 1:
            xco.append('T')
        elif c == 2:
            xco.append('G')
        elif c == 3:
            xco.append('C')
    return xco
 
#print decryptText(cipher, sequence, public, private)            
print ('Your text is: ' + decryptText(cipher, sequence, public, private))